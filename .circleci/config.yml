version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  destroy_environments:
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
           aws cloudformation delete-stack --stack-name udacityproj3frontend-${CIRCLE_WORKFLOW_ID:0:5}
           aws cloudformation delete-stack --stack-name udacityproj3backend-${CIRCLE_WORKFLOW_ID:0:5} 
           aws cloudformation delete-stack --stack-name udacityproj3cloudfront-${CIRCLE_WORKFLOW_ID:0:5}

  revert-migration: 
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: 46379a95-9d53-46f2-becb-d0e5c670441f" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi           
jobs:
  build-frontend:
    working_directory: ~/udacitycicd/frontend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout:
          path: ~/udacitycicd
      - restore_cache:
          keys: [frontend-build1]
      - run: npm i
      - save_cache:
          paths: [node_modules]
          key: frontend-build1

  build-backend:
    working_directory: ~/udacitycicd/backend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout:
            path: ~/udacitycicd
      - restore_cache:
          keys: [backend-build1]
      - run: npm i
      - save_cache:
          paths: [node_modules]
          key: backend-build1
  test-frontend:
      working_directory: ~/udacitycicd/frontend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
           path: ~/udacitycicd
        - restore_cache:
            keys: [frontend-build1]
        - run: npm run test
                  
  test-backend:
      working_directory: ~/udacitycicd/backend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
            path: ~/udacitycicd
        - restore_cache:
            keys: [backend-build1]
        - run: npm run test

  scan-backend:
      working_directory: ~/udacitycicd/backend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
            path: ~/udacitycicd
        - restore_cache:
            keys: [backend-build1]
        #- run: npm audit fix --audit-level=critical --force
        #- run: npm audit --audit-level=critical
        - slack/notify:            
            event: fail
            template: basic_fail_1
  scan-frontend:
      working_directory: ~/udacitycicd/frontend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
           path: ~/udacitycicd
        - restore_cache:
            keys: [frontend-build1]
        #- run: npm audit fix --audit-level=critical --force
        #- run: npm audit --audit-level=critical
        - slack/notify:            
            event: fail
            template: basic_fail_1
         
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli      
    steps:      
      - run: 
          name: Install Git
          command: |
            yum update -y && yum install git -y
      - run:
          name: check git version
          command: |
            git --version
      - run:
          name: Install tar and gzip utility
          command: |
            yum install -y tar gzip
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacitycdbackend \
              --stack-name udacityproj3backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"                   
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacitycdfrontend \
              --stack-name udacityproj3frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"                     
      - run:
          name: Add back-end ip to ansible inventory
          command: |            
            aws ec2 describe-instances \
            --filters  Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt           
      #- run:
      #    name: Ensure CloudFront infrastructure exist
      #    command: |
      #      aws cloudformation deploy \
      #        --template-file .circleci/files/cloudfront.yml \
      #        --tags project=udacitycdcloudfront \
       #       --stack-name udacityproj3cloudfront-${CIRCLE_WORKFLOW_ID:0:5} \
       #       --region us-east-1 \
       #       --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}-avudaproj3cicd"               
      #- destroy_environments
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - run:
          name: display inventory file
          command: |
            cat .circleci/ansible/inventory.txt        
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout          
      - add_ssh_keys:
          fingerprints: ["02:e5:d6:ad:c5:5e:b3:c5:8e:60:a4:27:af:ce:ad:7b"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |            
            apk add --update tar gzip ansible nodejs npm curl            
            pip install awscli
      - run:
          name: Configure server with ansible
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      #- destroy_environments
  
  run-migrations:
    working_directory: ~/udacitycicd/backend
    docker:
      - image: circleci/node
    steps:
      - checkout:
          path: ~/udacitycicd
      - restore_cache:
            keys: [backend-build1]
      - run: 
          name: Run DB Migration
          command: |
            npm run migrations            
      #- destroy_environments
      
  deploy-frontend:
    working_directory: ~/udacitycicd/frontend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout:
          path: ~/udacitycicd
      - restore_cache:
            keys: [frontend-build1]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get -y install tar gzip ansible curl            
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://{BACKEND_IP}:3030
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm install webpack-dev-server -g                        
            npm run build            
            aws s3 sync ./dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:5}"  --delete
      #- destroy_environments      
      #- revert-migration
  
  deploy-backend:
    working_directory: ~/udacitycicd/backend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout:
          path: ~/udacitycicd
      - restore_cache:
            keys: [backend-build1]
      - add_ssh_keys:
          fingerprints: ["02:e5:d6:ad:c5:5e:b3:c5:8e:60:a4:27:af:ce:ad:7b"]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get -y install tar gzip ansible curl            
            pip install awscli
      - run:
          name: Build and deploy backend
          no_output_timeout: 30m
          command: |
            npm run build    
            ansible-playbook -i ~/udacitycicd/.circleci/ansible/inventory.txt ~/udacitycicd/.circleci/ansible/deploy-backend.yml                                
      #- destroy_environments      
      #- revert-migration
    
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Smoke test backend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo "${BACKEND_IP}"
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Smoke test frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID::0:5}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["02:e5:d6:ad:c5:5e:b3:c5:8e:60:a4:27:af:ce:ad:7b"]
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
      - run:
          name: Promote CloudFront distribution and clean up old resources
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID:0:5\`].Value" \
              --no-paginate --output text)
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Old Workflow Id: "$OldWorkflowID"
            echo "$STACKS[*]"
            if echo "$STACKS[*]" | grep -Eq "$OldWorkflowID" 
            then
              echo "${OldWorkflowID}"
              echo "This is the bucket: "
              echo udapeople-${OldWorkflowID}
              echo "This is the bucket url: "
              echo "s3://udapeople-${OldWorkflowID}"
            fi                 
workflows:
  #send-notification:
  #  jobs:
  #    - notify:
  #        context: SlackContext
  default:
    jobs:      
      - build-frontend
      - build-backend
     # - test-frontend:
     #     requires: [build-frontend]
     # - test-backend:
     #     requires: [build-backend]
    #  - scan-frontend:
    #      context: SlackContext
    #      requires: [test-frontend]
    #  - scan-backend:
    #      context: SlackContext
    #      requires: [test-backend]
    #  - deploy-infrastructure:
    #     requires: [build-frontend, build-backend]
    #     filters:
    #        branches:
    #          only:
    #            - main
      - configure-infrastructure:
          requires: [build-frontend, build-backend]
      - run-migrations:
            requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
            requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #      requires: [smoke-test]
      
