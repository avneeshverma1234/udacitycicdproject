version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  destroy_frontend_environment:
    steps:
      - run:
          name: Destroy Frontend environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udacityproj3frontend-${CIRCLE_WORKFLOW_ID:0:5}
  destroy_backend_environment:
    steps:
      - run:
          name: Destroy Backend environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udacityproj3backend-${CIRCLE_WORKFLOW_ID:0:5}
jobs:

  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  build-frontend:
    working_directory: ~/udacitycicd/frontend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout:
          path: ~/udacitycicd
      - restore_cache:
          keys: [frontend-build1]
      - run: npm i
      - save_cache:
          paths: [node_modules]
          key: frontend-build1

  build-backend:
    working_directory: ~/udacitycicd/backend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout:
          path: ~/udacitycicd
      - restore_cache:
          keys: [backend-build1]
      - run: npm i
      - save_cache:
          paths: [node_modules]
          key: backend-build1
  test-frontend:
      working_directory: ~/udacitycicd/frontend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
           path: ~/udacitycicd
        - restore_cache:
            keys: [frontend-build1]
        - run: npm run test
                  
  test-backend:
      working_directory: ~/udacitycicd/backend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
            path: ~/udacitycicd
        - restore_cache:
            keys: [backend-build1]
        - run: npm run test

  scan-backend:
      working_directory: ~/udacitycicd/backend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
            path: ~/udacitycicd
        - restore_cache:
            keys: [backend-build1]
        - run: npm audit fix --audit-level=critical --force
        - run: npm audit --audit-level=critical

  scan-frontend:
      working_directory: ~/udacitycicd/frontend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
           path: ~/udacitycicd
        - restore_cache:
            keys: [frontend-build1]
        - run: npm audit fix --audit-level=critical --force
        - run: npm audit --audit-level=critical

  checkoutcode:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI amazon/aws-cli
    steps:
      # Checkout code from git      
      - run: 
          name: Install Git
          command: |
            yum update -y && yum install git -y
      - run:
          name: check git version
          command: |
            git --version
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacitycdbackend \
              --stack-name udacityproj3backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"      
      - destroy_backend_environment        
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacitycdfrontend \
              --stack-name udacityproj3frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"               
      - destroy_frontend_environment
      - run:
          name: Add back-end ip to ansible inventory
          command: |            
            aws ec2 describe-instances \
            --filters  Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt           
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - run:
          name: display inventory file
          command: |
            cat .circleci/ansible/inventory.txt        
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["02:e5:d6:ad:c5:5e:b3:c5:8e:60:a4:27:af:ce:ad:7b"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

  diagnostics:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI #- run: echo "THIS IS A SAMPLE TEXT" > ~/output.txt
    steps:
      - run:
          name: Diags
          command: |
            pwd
            ls -la . ..
            printenv
      # Here's where you will add some code to rollback on failure   
workflows:
  send-notification:
    jobs:
      - notify:
          context: SlackContext
  default:
    jobs:      
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend] 
      - test-backend:
          requires: [build-backend] 
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      #- deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]          
      #- configure_infrastructure:
      #    requires: [deploy-infrastructure] 
      
