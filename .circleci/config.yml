version: 2.1
orbs:
  slack: circleci/slack@4.12.1
commands:
  destroy_environments:
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
           aws cloudformation delete-stack --stack-name udacityproj3frontend-${CIRCLE_WORKFLOW_ID:0:5}
           aws cloudformation delete-stack --stack-name udacityproj3backend-${CIRCLE_WORKFLOW_ID:0:5} 
         #  aws cloudformation delete-stack --stack-name udacityproj3cloudfront-${CIRCLE_WORKFLOW_ID:0:5}

  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1  

  revert-migration: 
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |                                        
              npm run migrations:revert  
jobs:
  build-frontend:
    working_directory: ~/udacitycicd/frontend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout:
          path: ~/udacitycicd
      - restore_cache:
          keys: [frontend-build1]
      - run: npm i
      - run: npm run build
      - save_cache:
          paths: [node_modules]
          key: frontend-build1
      - notify_slack_error      
  build-backend:
    working_directory: ~/udacitycicd/backend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout:
            path: ~/udacitycicd
      - restore_cache:
          keys: [backend-build1]
      - run: npm i
      - run: npm run build
      - save_cache:
          paths: [node_modules]
          key: backend-build1
      - notify_slack_error      
  test-frontend:
      working_directory: ~/udacitycicd/frontend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
           path: ~/udacitycicd
        - restore_cache:
            keys: [frontend-build1]
        - run: npm run test
        - notify_slack_error        
  test-backend:
      working_directory: ~/udacitycicd/backend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
            path: ~/udacitycicd
        - restore_cache:
            keys: [backend-build1]
        - run: npm run test
        - notify_slack_error        

  scan-backend:
      working_directory: ~/udacitycicd/backend
      docker:
        - image: cimg/node:13.8.0
      steps:
        - checkout:
            path: ~/udacitycicd
        - restore_cache:
            keys: [backend-build1]      
        - run:
            name: Backend scan
            command: |
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical 
        - save_cache:
            paths: [node_modules]
            key: backend-build1
        - notify_slack_error        
  scan-frontend:
      working_directory: ~/udacitycicd/frontend
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout:
           path: ~/udacitycicd
        - restore_cache:
            keys: [frontend-build1]
        - run: npm audit fix --audit-level=critical --force
        - run: npm audit --audit-level=critical
        - notify_slack_error        
         
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli      
    steps:      
      - run: 
          name: Install Git
          command: |
            yum update -y && yum install git -y
      - run:
          name: check git version
          command: |
            git --version
      - run:
          name: Install tar and gzip utility
          command: |
            yum install -y tar gzip
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacitycdbackend \
              --stack-name udacityproj3backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"                   
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacitycdfrontend \
              --stack-name udacityproj3frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1 \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"                     
      - run:
          name: Add back-end ip to ansible inventory
          command: | 
            echo -e "\n" >>  .circleci/ansible/inventory.txt                     
            aws ec2 describe-instances \
            --filters  Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt           
    #  - run:
    #      name: Ensure CloudFront infrastructure exist
    #      command: |
    #        aws cloudformation deploy \
    #          --template-file .circleci/files/cloudfront.yml \
    #          --tags project=udacitycdcloudfront \
    #          --stack-name udacityproj3cloudfront-${CIRCLE_WORKFLOW_ID:0:5} \
     #         --region us-east-1 \
     #         --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}-avudaproj3cicd"               
      - destroy_environments
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - run:
          name: display inventory file
          command: |
            cat .circleci/ansible/inventory.txt 
      - notify_slack_error      
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout          
      - add_ssh_keys:
          fingerprints: ["02:e5:d6:ad:c5:5e:b3:c5:8e:60:a4:27:af:ce:ad:7b"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |            
            apk add --update tar gzip ansible nodejs npm curl            
            pip install awscli
      - run:
          name: Configure server with ansible
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy_environments
      - notify_slack_error      
  run-migrations:
    working_directory: ~/udacitycicd/backend
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout:
          path: ~/udacitycicd
      - restore_cache:
            keys: [backend-build1]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli -y
      - run: 
          name: Run DB Migration
          command: |
            npm run migrations > migrations_dump.txt            
      - destroy_environments
      - notify_slack_error      
  deploy-frontend:
    working_directory: ~/udacitycicd/frontend
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout:
          path: ~/udacitycicd
      - restore_cache:
            keys: [frontend-build1]
      - run:
          name: Install dependencies
          command: |
           sudo apt-get update
           sudo apt-get -y install tar gzip ansible curl python python3-pip          
           pip3 install awscli      
      - run:
          name: Deploy frontend objects
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_IP}:3030
            sudo npm install webpack-dev-server -g   
            echo "${API_URL}"                     
            npm run build            
            aws s3 sync ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5}  --delete
      - destroy_environments            
      - notify_slack_error      
  deploy-backend:
    working_directory: ~/udacitycicd/backend
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout:
          path: ~/udacitycicd
      - attach_workspace:
          at: ~/udacitycicd/.circleci/ansible      
      - add_ssh_keys:
          fingerprints: ["02:e5:d6:ad:c5:5e:b3:c5:8e:60:a4:27:af:ce:ad:7b"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      #- run:
      #    name: Build backend
      #    no_output_timeout: 30m
      #    command: |
      #      npm install
      #      npm run build    
      - run:
          name: display inventory file
          command: |
            cat ~/udacitycicd/.circleci/ansible/inventory.txt
      - run:
          name: deploy backend
          no_output_timeout: 30m
          command: |            
            ansible-playbook -i ~/udacitycicd/.circleci/ansible/inventory.txt ~/udacitycicd/.circleci/ansible/deploy-backend.yml -f1                                
      - destroy_environments      
      - revert-migration
      - notify_slack_error      
  smoke-test:
    working_directory: ~/udacitycicd/backend
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout:
          path: ~/udacitycicd
      - restore_cache:
            keys: [backend-build1]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli -y
      - run:
          name: Smoke test backend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo "${BACKEND_IP}"
            echo "Backend IP: $BACKEND_IP"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"            
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi            
      - run:
          name: Smoke test frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy_environments      
      - revert-migration
      - notify_slack_error      
  cloudfront-update:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["02:e5:d6:ad:c5:5e:b3:c5:8e:60:a4:27:af:ce:ad:7b"]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli -y
      - run:
          name: Update cloudfront distribution
          no_output_timeout: 30m
          command: |
            # Fetch workflow ID
            export CurrentWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            if [[ "" == "${CurrentWorkflowID}" ]]
            then
              echo "First time deployment detected."
              CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:5}
            fi
            echo "Current Workflow ID: ${CurrentWorkflowID}"   
            echo "${CurrentWorkflowID}" > ~/project/workflow_id.txt         
            # Enable static website hosting for udapeople-frontend S3 bucket using CloudFront
            aws cloudformation deploy \
                      --template-file .circleci/files/cloudfront.yml \
                      --stack-name "InitialStack-${CurrentWorkflowID}" \
                      --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
                      --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/workflow_id.txt
      - notify_slack_error  
  cleanup:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli -y
      - run:
          name: Fetch the Old workflow ID and remove related resources
          command: |
            # Fetch the Old workflow ID
            OldWorkflowID=$(cat /tmp/workspace/project/workflow_id.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:5}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:5}" != "${OldWorkflowID}" ]]
            then
              echo "Delete stack: WorkflowID: ${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "No cleanup for stack: WorkflowID: ${OldWorkflowID}: this is the latest stack"
            fi    
workflows:
  #send-notification:
  #  jobs:
  #    - notify:
  #        context: SlackContext
  default:
    jobs:            
      - build-backend          
      - build-frontend          
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
    #  - scan-frontend:
    #      context: SlackContext
    #      requires: [test-frontend]
    #  - scan-backend:    
    #      requires: [build-backend]
      - deploy-infrastructure:
         requires: [test-frontend, test-backend]
         filters:
            branches:
              only:
                - main
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
            requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
         requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
            requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      
